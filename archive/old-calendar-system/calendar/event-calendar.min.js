/**
 * Event Calendar - Lightweight JavaScript Calendar (Development Version)
 * A simplified implementation based on the API from vkurko/calendar
 * This is a placeholder - you should replace with the actual library from:
 * https://github.com/vkurko/calendar
 */

class EventCalendar {
    constructor(element, options) {
        this.element = element;
        this.options = options || {};
        this.events = options.events || [];
        this.currentView = options.view || 'dayGridMonth';
        this.currentDate = new Date();
        
        // Initialize the calendar
        this.render();
        
        // Add event listeners for navigation
        this.setupEventListeners();
    }
    
    render() {
        // Basic calendar rendering logic
        const header = this.renderHeader();
        const body = this.renderBody();
        
        this.element.innerHTML = '';
        this.element.classList.add('ec');
        this.element.appendChild(header);
        this.element.appendChild(body);
        
        // Render events
        this.renderEvents();
    }
    
    renderHeader() {
        const header = document.createElement('div');
        header.className = 'ec-header';
        
        // Create title
        const title = document.createElement('div');
        title.className = 'ec-title';
        title.textContent = this.formatTitle();
        
        // Create navigation buttons
        const navLeft = document.createElement('div');
        navLeft.className = 'ec-nav-left';
        
        if (this.options.headerToolbar && this.options.headerToolbar.start) {
            const buttons = this.options.headerToolbar.start.split(' ');
            buttons.forEach(btn => {
                if (btn === 'prev,next') {
                    const prevBtn = document.createElement('button');
                    prevBtn.className = 'ec-prev';
                    prevBtn.innerHTML = '&larr;';
                    prevBtn.dataset.action = 'prev';
                    navLeft.appendChild(prevBtn);
                    
                    const nextBtn = document.createElement('button');
                    nextBtn.className = 'ec-next';
                    nextBtn.innerHTML = '&rarr;';
                    nextBtn.dataset.action = 'next';
                    navLeft.appendChild(nextBtn);
                } else if (btn === 'today') {
                    const todayBtn = document.createElement('button');
                    todayBtn.className = 'ec-today';
                    todayBtn.textContent = 'Today';
                    todayBtn.dataset.action = 'today';
                    navLeft.appendChild(todayBtn);
                }
            });
        }
        
        const navRight = document.createElement('div');
        navRight.className = 'ec-nav-right';
        
        if (this.options.headerToolbar && this.options.headerToolbar.end) {
            const buttons = this.options.headerToolbar.end.split(',');
            buttons.forEach(btn => {
                const viewBtn = document.createElement('button');
                viewBtn.className = 'ec-view-btn';
                viewBtn.textContent = this.getViewButtonText(btn);
                viewBtn.dataset.view = btn;
                navRight.appendChild(viewBtn);
            });
        }
        
        header.appendChild(navLeft);
        header.appendChild(title);
        header.appendChild(navRight);
        
        return header;
    }
    
    renderBody() {
        const body = document.createElement('div');
        body.className = 'ec-body';
        
        // Simplified view rendering
        if (this.currentView === 'dayGridMonth') {
            body.appendChild(this.renderMonthView());
        } else if (this.currentView === 'timeGridWeek') {
            body.appendChild(this.renderWeekView());
        } else if (this.currentView === 'listMonth') {
            body.appendChild(this.renderListView());
        }
        
        return body;
    }
    
    renderMonthView() {
        const monthView = document.createElement('div');
        monthView.className = 'ec-month-view';
        
        // Create weekday headers
        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const weekdaysRow = document.createElement('div');
        weekdaysRow.className = 'ec-weekdays';
        
        weekdays.forEach(day => {
            const dayEl = document.createElement('div');
            dayEl.className = 'ec-weekday';
            dayEl.textContent = day;
            weekdaysRow.appendChild(dayEl);
        });
        
        monthView.appendChild(weekdaysRow);
        
        // Create days grid (simplified)
        const daysGrid = document.createElement('div');
        daysGrid.className = 'ec-days-grid';
        
        // Get current month info
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDay = firstDay.getDay();
        
        // Create grid cells
        for (let i = 0; i < 42; i++) {
            const day = document.createElement('div');
            day.className = 'ec-day';
            
            const dayNumber = i - startingDay + 1;
            
            if (dayNumber > 0 && dayNumber <= daysInMonth) {
                day.textContent = dayNumber;
                day.dataset.date = `${year}-${String(month + 1).padStart(2, '0')}-${String(dayNumber).padStart(2, '0')}`;
                
                // Mark today
                const today = new Date();
                if (year === today.getFullYear() && month === today.getMonth() && dayNumber === today.getDate()) {
                    day.classList.add('ec-today');
                }
            }
            
            daysGrid.appendChild(day);
        }
        
        monthView.appendChild(daysGrid);
        return monthView;
    }
    
    renderWeekView() {
        const weekView = document.createElement('div');
        weekView.className = 'ec-week-view';
        weekView.innerHTML = '<p class="ec-placeholder">Week view - Install the full library for complete functionality</p>';
        return weekView;
    }
    
    renderListView() {
        const listView = document.createElement('div');
        listView.className = 'ec-list-view';
        listView.innerHTML = '<p class="ec-placeholder">List view - Install the full library for complete functionality</p>';
        return listView;
    }
    
    renderEvents() {
        if (!this.events || !this.events.length) return;
        
        this.events.forEach(event => {
            // Simple event rendering for month view
            if (this.currentView === 'dayGridMonth') {
                const startDate = new Date(event.start);
                const dateStr = startDate.toISOString().split('T')[0];
                const dayEl = this.element.querySelector(`.ec-day[data-date="${dateStr}"]`);
                
                if (dayEl) {
                    const eventEl = document.createElement('div');
                    eventEl.className = 'ec-event';
                    eventEl.textContent = event.title;
                    eventEl.dataset.id = event.id;
                    
                    // Add custom classes
                    if (event.classNames) {
                        event.classNames.forEach(className => {
                            eventEl.classList.add(className);
                        });
                    }
                    
                    eventEl.addEventListener('click', () => {
                        if (this.options.eventClick) {
                            this.options.eventClick({
                                event: {
                                    id: event.id,
                                    title: event.title,
                                    start: event.start,
                                    end: event.end,
                                    extendedProps: event.extendedProps || {}
                                }
                            });
                        }
                    });
                    
                    dayEl.appendChild(eventEl);
                }
            }
        });
    }
    
    formatTitle() {
        const options = { year: 'numeric', month: 'long' };
        return this.currentDate.toLocaleDateString(undefined, options);
    }
    
    getViewButtonText(viewName) {
        const viewTexts = {
            dayGridMonth: 'Month',
            timeGridWeek: 'Week',
            listMonth: 'List'
        };
        
        return viewTexts[viewName] || viewName;
    }
    
    setupEventListeners() {
        this.element.addEventListener('click', (e) => {
            // Handle navigation
            if (e.target.dataset.action === 'prev') {
                this.prev();
            } else if (e.target.dataset.action === 'next') {
                this.next();
            } else if (e.target.dataset.action === 'today') {
                this.today();
            }
            
            // Handle view change
            if (e.target.dataset.view) {
                this.setOption('view', e.target.dataset.view);
            }
        });
    }
    
    // API methods to match vkurko/calendar and fullcalendar
    setOption(name, value) {
        this.options[name] = value;
        
        if (name === 'view') {
            this.currentView = value;
            this.render();
            
            if (this.options.datesSet) {
                this.options.datesSet({
                    start: this.getViewStart(),
                    end: this.getViewEnd()
                });
            }
        } else if (name === 'events') {
            this.events = value;
            this.render();
        }
    }
    
    getOption(name) {
        return this.options[name];
    }
    
    next() {
        if (this.currentView === 'dayGridMonth') {
            this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 1);
        } else if (this.currentView === 'timeGridWeek') {
            this.currentDate = new Date(this.currentDate.getTime() + 7 * 24 * 60 * 60 * 1000);
        }
        
        this.render();
        
        if (this.options.datesSet) {
            this.options.datesSet({
                start: this.getViewStart(),
                end: this.getViewEnd()
            });
        }
    }
    
    prev() {
        if (this.currentView === 'dayGridMonth') {
            this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, 1);
        } else if (this.currentView === 'timeGridWeek') {
            this.currentDate = new Date(this.currentDate.getTime() - 7 * 24 * 60 * 60 * 1000);
        }
        
        this.render();
        
        if (this.options.datesSet) {
            this.options.datesSet({
                start: this.getViewStart(),
                end: this.getViewEnd()
            });
        }
    }
    
    today() {
        this.currentDate = new Date();
        this.render();
        
        if (this.options.datesSet) {
            this.options.datesSet({
                start: this.getViewStart(),
                end: this.getViewEnd()
            });
        }
    }
    
    getViewStart() {
        if (this.currentView === 'dayGridMonth') {
            return new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
        } else if (this.currentView === 'timeGridWeek') {
            const first = this.currentDate.getDate() - this.currentDate.getDay();
            return new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), first);
        }
        return this.currentDate;
    }
    
    getViewEnd() {
        if (this.currentView === 'dayGridMonth') {
            return new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
        } else if (this.currentView === 'timeGridWeek') {
            const first = this.currentDate.getDate() - this.currentDate.getDay();
            return new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), first + 7);
        }
        return this.currentDate;
    }
}
