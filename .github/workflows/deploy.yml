name: Build and Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # First job: Update version data
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version_updated: ${{ steps.version_check.outputs.updated }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for commit count
      
      # Check if this is already a version update commit
      - name: Check commit type
        id: commit_check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"update version data [skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[skip ci]"* ]]; then
            echo "This is an automated commit or skip ci, skipping"
            echo "should_update=false" >> $GITHUB_OUTPUT
          else
            echo "This is a regular commit, updating version data"
            echo "should_update=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.commit_check.outputs.should_update != 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Generate version data
        if: steps.commit_check.outputs.should_update != 'false'
        run: |
          echo "Running version data generation"
          node generate-version-data.js
          
          VERSION=$(grep -o '"version": "[0-9]*"' js/version-data.js | grep -o '[0-9]*')
          echo "Generated version data with build number: $VERSION"
      
      - name: Check if version was updated
        id: version_check
        run: |
          if [[ "${{ steps.commit_check.outputs.should_update }}" != "false" ]] && [[ $(git status --porcelain js/version-data.js | wc -l) -gt 0 ]]; then
            echo "Version data was updated"
            echo "updated=true" >> $GITHUB_OUTPUT
            VERSION=$(grep -o '"version": "[0-9]*"' js/version-data.js | grep -o '[0-9]*')
            echo "New build number: $VERSION"
          else
            echo "No version update needed"
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit version update
        if: steps.version_check.outputs.updated == 'true'
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'action@github.com'
          git add js/version-data.js
          git commit -m "chore: update version data [skip ci]"
          git push

  # Second job: Deploy to GitHub Pages (runs after version update)
  deploy:
    needs: update-version  # This ensures deploy runs AFTER version update
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history
          
      # Critical: Get the version update commit that was just pushed
      - name: Get latest including version update
        run: |
          echo "Current HEAD before fetch: $(git rev-parse HEAD)"
          git fetch origin main
          git checkout origin/main
          echo "New HEAD after checkout: $(git rev-parse HEAD)"
          echo "Latest commit: $(git log -1 --oneline)"
          echo "Version in version-data.js: $(grep -o '"version": "[0-9]*"' js/version-data.js || echo 'Not found')"
      
      # Regenerate version-data.js to ensure it includes all commits up to this point
      - name: Regenerate version data with latest commits
        run: |
          echo "Regenerating version-data.js to include all commits..."
          node generate-version-data.js
          echo "New version in version-data.js: $(grep -o '"version": "[0-9]*"' js/version-data.js || echo 'Not found')"
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      # Debug: Show what version we're about to deploy
      - name: Verify version before deployment
        run: |
          echo "=== DEPLOYMENT DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Git status:"
          git status
          echo ""
          echo "Latest 3 commits:"
          git log --oneline -3
          echo ""
          echo "Version in js/version-data.js:"
          grep -o '"version": "[0-9]*"' js/version-data.js || echo 'Version not found!'
          echo ""
          echo "First few lines of version-data.js:"
          head -20 js/version-data.js
          echo ""
          echo "File modification time:"
          ls -la js/version-data.js
          echo "=== END DEBUG INFO ==="
          
      # Force GitHub Pages to rebuild by updating a timestamp
      - name: Force rebuild with timestamp
        run: |
          echo "Last deployed: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" > .last-deploy
          echo "Version deployed: $(grep -o '"version": "[0-9]*"' js/version-data.js | grep -o '[0-9]*')" >> .last-deploy
          echo "Commit deployed: $(git rev-parse HEAD)" >> .last-deploy
          cat .last-deploy
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
