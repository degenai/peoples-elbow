name: Update Version Data and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'js/version-data.js'  # Prevent loops when only version data changes

permissions:
  contents: write  # Permission to write to repository

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for commit count
      
      # Check if this is already a version update commit
      - name: Check commit type
        id: commit_check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"update version data [skip ci]"* ]]; then
            echo "This is an automated version update, skipping"
            echo "should_update=false" >> $GITHUB_OUTPUT
          else
            echo "This is a regular commit, updating version data"
            echo "should_update=true" >> $GITHUB_OUTPUT
          fi
      
      # Skip the rest if this is already a version update commit
      - name: Setup Node.js
        if: steps.commit_check.outputs.should_update != 'false'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      # THIS IS THE KEY FIX - A simpler approach to force the correct version number
      - name: Create version check script
        if: steps.commit_check.outputs.should_update != 'false'
        run: |
          # Get raw commit count including the current commit
          TOTAL_COMMITS=$(git rev-list --count HEAD)
          echo "Total commits (including current): $TOTAL_COMMITS"
          
          # Create a separate, simpler script to just force the version number
          cat > fix-version.js << 'EOL'
          // Simple script to ensure version number matches commit count
          const fs = require('fs');
          
          try {
            // Get the total commits from command line argument
            const correctVersion = process.argv[2];
            console.log(`Setting version to match total commit count: ${correctVersion}`);
            
            // Read the current version data file
            const versionDataPath = 'js/version-data.js';
            const fileContent = fs.readFileSync(versionDataPath, 'utf8');
            
            // Extract the JSON part
            const match = fileContent.match(/window\.PEOPLES_ELBOW_VERSION_DATA = (\{[\s\S]*?\});/);
            if (!match) {
              throw new Error('Could not parse version data file');
            }
            
            // Parse and update the version
            const versionData = JSON.parse(match[1]);
            const oldVersion = versionData.version;
            versionData.version = correctVersion;
            
            // Generate the new file content
            const newContent = fileContent.replace(
              /window\.PEOPLES_ELBOW_VERSION_DATA = \{[\s\S]*?\};/,
              `window.PEOPLES_ELBOW_VERSION_DATA = ${JSON.stringify(versionData, null, 2)};`
            );
            
            // Write the updated file
            fs.writeFileSync(versionDataPath, newContent);
            console.log(`Updated version from ${oldVersion} to ${correctVersion}`);
          } catch (error) {
            console.error('Error updating version:', error);
            process.exit(1);
          }
          EOL
          
          echo "Created version fix script"
          cat fix-version.js
      
      - name: Generate version data
        if: steps.commit_check.outputs.should_update != 'false'
        run: |
          # Run the standard version generation first 
          echo "Running standard version data generation"
          node generate-version-data.js
          echo "Standard version data generation complete"
          
          # Now run our fix script to ensure correct version number
          echo "Running version fix to ensure correct count"
          TOTAL_COMMITS=$(git rev-list --count HEAD)
          node fix-version.js "$TOTAL_COMMITS"
          echo "Version fix complete - version should now be $TOTAL_COMMITS"
      
      - name: Check if version was updated
        id: version_check
        if: steps.commit_check.outputs.should_update != 'false'
        run: |
          if [[ $(git status --porcelain js/version-data.js | wc -l) -gt 0 ]]; then
            echo "Version data was updated"
            echo "updated=true" >> $GITHUB_OUTPUT
            
            # Log the new version number for debugging
            NEW_VERSION=$(grep -o '"version": "[0-9]*"' js/version-data.js | grep -o '[0-9]*')
            echo "New version number: $NEW_VERSION"
          else
            echo "No changes to version data"
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Commit and push if changed
        if: steps.commit_check.outputs.should_update != 'false' && steps.version_check.outputs.updated == 'true'
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'action@github.com'
          git add js/version-data.js
          git commit -m "chore: update version data [skip ci]"
          git push
          # Add a short delay to ensure changes are registered before GitHub Pages builds
          sleep 5
