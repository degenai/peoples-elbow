/**
 * The People's Elbow - Version Data Generator
 * This script generates version data from git commits
 * 
 * Run this script before deploying to generate version-data.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Get current commit count for version number
function getCommitCount() {
    try {
        const commitCount = execSync('git rev-list --count HEAD').toString().trim();
        return commitCount;
    } catch (error) {
        console.error('Error getting commit count:', error.message);
        return '0';
    }
}

// Get recent commit history
function getCommitHistory(count = 20) {
    try {
        // First get the hashes to use for the full messages
        const gitHashCommand = `git log --pretty=format:"%H" -n ${count}`;
        const hashes = execSync(gitHashCommand).toString().split('\n');
        
        // Now get the summary info (hash|date|subject line)
        const gitLogCommand = `git log --pretty=format:"%h|%ad|%s" --date=short -n ${count}`;
        const commitLog = execSync(gitLogCommand).toString();
        
        // Process each commit to get summary and full message
        const commits = commitLog.split('\n').map((line, index) => {
            const [shortHash, date, subject] = line.split('|');
            const fullHash = hashes[index];
            const commitCount = getCommitCount() - index;
            
            // Get the full commit message for this hash
            let fullMessage = '';
            try {
                // Get the full commit message (both subject and body)
                fullMessage = execSync(`git log --format=%B -n 1 ${fullHash}`).toString().trim();
            } catch (err) {
                console.error(`Error getting full message for ${shortHash}:`, err.message);
                fullMessage = subject; // Fallback to subject if there's an error
            }
            
            return {
                hash: shortHash,
                date,
                subject,  // Just the first line (the subject)
                message: fullMessage, // The full commit message including body
                version: commitCount.toString()
            };
        });
        
        return commits;
    } catch (error) {
        console.error('Error getting commit history:', error.message);
        return [];
    }
}

// Generate the version data JavaScript file
function generateVersionDataFile() {
    const commitCount = getCommitCount();
    const commits = getCommitHistory();
    
    // Create version data object
    const versionData = {
        version: commitCount,
        lastUpdated: new Date().toISOString(),
        commits: commits
    };
    
    // Convert to JavaScript variable assignment
    const jsContent = `/**
 * The People's Elbow - Auto-generated Version Data
 * Generated on: ${new Date().toLocaleString()}
 * DO NOT EDIT THIS FILE MANUALLY - run generate-version-data.js instead
 */

window.PEOPLES_ELBOW_VERSION_DATA = ${JSON.stringify(versionData, null, 2)};
`;
    
    // Write to file
    const outputPath = path.join(__dirname, 'js', 'version-data.js');
    fs.writeFileSync(outputPath, jsContent);
    
    console.log(`Version data generated successfully!`);
    console.log(`Current version: ${commitCount}`);
    console.log(`File saved to: ${outputPath}`);
}

// Run the generator
generateVersionDataFile();
